{"version":3,"sources":["App.js","index.js"],"names":["App","useState","countervalue","setCountervalue","changeValue","setChangeValue","useEffect","a","fetch","then","response","json","data","counter","catch","err","console","log","className","value","type","onChange","e","parseInt","target","onClick","prevValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAqEeA,MAlEf,WAEE,MAAuCC,mBAAS,IAAhD,mBAAQC,EAAR,KAAqBC,EAArB,KACA,EAAsCF,mBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KA6CA,OA7BCC,oBAAS,sBAAC,8BAAAC,EAAA,6DAKPC,MAAM,eAAeC,MAAK,SAACC,GAAD,OAAcA,EAASC,QAAMF,MAAK,SAACG,GAC7DT,EAAgBS,EAAKC,SACrBR,EAAeO,EAAKR,gBACjBU,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,MARvB,kBAWkBP,MAAM,eAXxB,cAWCE,EAXD,gBAacA,EAASC,OAbvB,OAaCC,EAbD,OAeLT,EAAgBS,EAAKC,SACrBR,EAAeO,EAAKR,aAhBf,kDAmBLY,QAAQC,IAAR,MAnBK,0DAqBP,IASF,sBAAKC,UAAU,MAAf,UACE,mBAAIA,UAAW,QAAf,sBACA,uBAAOA,UAAW,WAAWC,MAAOf,EAAagB,KAAK,SAASC,SARzC,SAACC,GACzBN,QAAQC,IAAI,WACZZ,EAAekB,SAASD,EAAEE,OAAOL,WAIjC,KAGE,sBAAKD,UAAU,UAAf,UAGA,yBAAQO,QAAS,kBAAMtB,GAAgB,SAACuB,GAAD,OAAeA,EAAYtB,MAAlE,qBAIA,kCAAKF,EAAL,OACA,wBAAQuB,QAAS,kBAAMtB,GAAgB,SAACuB,GAAD,OAAeA,EAAYtB,MAAlE,wBC1DNuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bcca0a6b.chunk.js","sourcesContent":["import { useState,useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  //'setCountervalue' is the function to change the value/state of \"countervalue\"\n  const [ countervalue,setCountervalue]= useState(10)\n  const [changeValue, setChangeValue] = useState(1);\n\n  /*\n  useEffect(() => {   \n    {/*'useEffect' is another Hook example which is called everytime on rendering.\n      It has 2 parts - 1. Event that we want to run, 2. depedency list for event*/\n      //fetch(\"./data.json\") // This is a JS function, which we can fetch any file,end point or Url.\n      // Note: while fetching operation is going on we can't wait for the process to complete as we have to proceed further so we make it asynchronous\n      /*fetch(\"./data.json\").then((response) => response.json).then((data)=>{\n      setCountervalue(data.counter);\n      setChangeValue(data.changeValue);\n      }).catch((err) => console.log(err)); //If there is any error then this function deals with it,    \n   }, [])\n   */\n\n   //Async version of 'usEffect'\n   useEffect(async () => {   \n      /*'useEffect' is another Hook example which is called everytime on rendering.\n      It has 2 parts - 1. Event that we want to run, 2. depedency list for event*/\n      //fetch(\"./data.json\") // This is a JS function, which we can fetch any file,end point or Url.\n      // Note: while fetching operation is going on we can't wait for the process to complete as we have to proceed further so we make it asynchronous\n      fetch(\"./data.json\").then((response) => response.json).then((data)=>{\n      setCountervalue(data.counter);\n      setChangeValue(data.changeValue);\n      }).catch((err) => console.log(err)); //If there is any error then this function deals with it, \n\n      try {\n        const response = await fetch(\"./data.json\"); \n        // The keyword await is used to wait for the activity which here is a promise of fetching data\n        const data = await response.json();\n  \n        setCountervalue(data.counter);\n        setChangeValue(data.changeValue);\n      } \n      catch (error) {\n        console.log(error);\n      }\n   }, [])\n\n\n  const updateChangeValue = (e) => {\n    console.log(\"changed\")\n    setChangeValue(parseInt(e.target.value)); {/* This is attributes associated with event name 'e'*/}\n  };\n\n  return (\n    <div className=\"App\">\n      <p  className= \"title\"> Counter</p>\n      <input className= \"inpField\" value={changeValue} type=\"number\" onChange={updateChangeValue} />  {/*when a change occurs*/}\n      <div className=\"counter\">\n      {/*<button onClick={() => setCountervalue(countervalue+1)}> + </button>*/}\n      {/* Memory leak: When we directly change the value, there might be race condition happening, because it is reading the value itself and updating itself. So there might be different calls*/}\n      <button onClick={() => setCountervalue((prevValue) => prevValue + changeValue)}> {/*To prevent memory leak we used another variable.It reads from current state and is accessed as passed value from 'useState' object*/}\n        +\n      </button>\n      \n      <p> {countervalue} </p>\n      <button onClick={() => setCountervalue((prevValue) => prevValue - changeValue)}> - </button>\n      </div> \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}